{"version":3,"sources":["index.js"],"names":["counter","start","Space","props","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","onClick","value","Board","_this","Object","C_Users_jomal_Desktop_Projects_PeaceableQueens_browser_gui_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","C_Users_jomal_Desktop_Projects_PeaceableQueens_browser_gui_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","C_Users_jomal_Desktop_Projects_PeaceableQueens_browser_gui_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","state","size","N","S","i","spaces","_this2","key","row","push","renderSpace","renderRow","newBoard","renderWhole","React","Component","Game","_this3","history","stepNumber","lastClick","options","_this4","current","qCount","B","W","countQueens","undoButton","jumpTo","redoButton","changeBoardSize","id","name","onChange","changeN","document","getElementById","getOptions","handleClick","ReactDOM","unmountComponentAtNode","render","parseInt","Array","fill","slice","length","rowS","Math","trunc","rowE","checkSpace","j","setState","concat","step"],"mappings":"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","file":"static/js/main.c563b545.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nlet counter = 0;    // counts the number of spaces made\r\nlet start = true;   // indicates if a new board is being created\r\n\r\n// a function component that takes in a value which will represent its spot on the board\r\nfunction Space(props) {\r\n  return (\r\n    <button className=\"space\" onClick={props.onClick}>\r\n        {props.value}\r\n    </button>\r\n  );\r\n}\r\n\r\n// a board to contain and manipulate spaces\r\nclass Board extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      size: this.props.size,\r\n    };\r\n  }\r\n\r\n  // fills every space in the board with 'B'\r\n  newBoard() {\r\n    let N = this.state.size;\r\n    let S = N*N;\r\n    for (let i = 0; i < S; i++) {\r\n      this.props.spaces[i] = 'B';\r\n    }\r\n    start = false;\r\n  }\r\n  \r\n  // makes a space with a value i\r\n  renderSpace(i) {\r\n    return (\r\n      <Space \r\n        key={i}\r\n        value={this.props.spaces[i]}\r\n        onClick={() => this.props.onClick(i)}\r\n      />\r\n    ); \r\n  }\r\n\r\n  // render a single row of spaces\r\n  renderRow() {\r\n    let N = this.state.size;\r\n    let row = []\r\n    \r\n    for (let i = 0; i < N; i++, counter++) {\r\n        row.push(this.renderSpace(counter))\r\n    }\r\n    return row\r\n  }\r\n\r\n  // render 'size' number of rows\r\n  renderWhole() {\r\n    let N = this.state.size;\r\n    let row = []\r\n    for (let i = 0; i < N; i++) {\r\n        row.push(<div key={i} className=\"board-row\">{this.renderRow()}</div>)\r\n    }\r\n    if (start) {\r\n      this.newBoard(); \r\n    }\r\n    counter = 0;\r\n    return row\r\n  }\r\n\r\n  // renders the whole board with all the spaces\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.renderWhole()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// a class to contain and manipulate the board\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      history: this.props.history,\r\n      stepNumber: 0,\r\n      size: this.props.size,\r\n      lastClick: this.props.lastClick,\r\n    };\r\n  }\r\n\r\n  // creates and returns a number of options for the board size\r\n  getOptions() {\r\n    let options = []\r\n    for (let i = 1; i <= 50; i++) {\r\n      options.push(<option key={i} value={i}>{i}</option>);\r\n    }\r\n    return options;\r\n  }\r\n\r\n  // renders the board and history\r\n  render() {\r\n    const history = this.state.history;\r\n    const current = history[this.state.stepNumber];\r\n    const qCount = countQueens(current.spaces, this.state.size);\r\n\r\n     \r\n    /* const moves = history.map((step, move) => {\r\n      const desc = move ?\r\n        'Go to move #' + move :\r\n        'Go to start';\r\n      return (\r\n        <li key={move}>\r\n          <button onClick={() => this.jumpTo(move)}>{desc}\r\n          </button>\r\n        </li>\r\n      );\r\n    }) */\r\n     \r\n    const undoButton = \r\n      <button onClick={() => this.jumpTo(this.state.stepNumber-1)}>Undo\r\n      </button>;\r\n\r\n    const redoButton = \r\n      <button onClick={() => this.jumpTo(this.state.stepNumber+1)}>Redo\r\n      </button>;\r\n      \r\n    \r\n\r\n    // change board size option list and button\r\n    let changeBoardSize = \r\n    <div>\r\n      Board Size:&nbsp;&nbsp;\r\n      <select id=\"size\" name=\"options\" size=\"1\" value={this.state.size} onChange={() => this.changeN(document.getElementById('size').value)}>\r\n        {this.getOptions()}\r\n      </select>\r\n      <button id=\"restart\" name=\"restartButton\" onClick={() => this.changeN(document.getElementById('size').value)}>Restart</button>\r\n      <br/><br/>\r\n    </div>;\r\n    \r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n        <h1>Peaceable Queens</h1>\r\n        {changeBoardSize}\r\n          <Board \r\n            spaces = {current.spaces}\r\n            onClick = {(i) => this.handleClick(i)}\r\n            size = {this.state.size}\r\n          />\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <br/><br/>\r\n          <div>Board Size: {this.state.size}x{this.state.size}</div>\r\n          <br/>\r\n          <div>{qCount}</div>\r\n          <div>{undoButton}{redoButton}</div>\r\n          <div>{/*moves*/}</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // start over with a new board of i size\r\n  changeN(i) {\r\n    ReactDOM.unmountComponentAtNode(document.getElementById('root'));\r\n    start = true;\r\n    ReactDOM.render(\r\n      <Game size = {parseInt(i)}  history = {[{\r\n        spaces: Array(i).fill(null),\r\n      }]}/>,\r\n      document.getElementById('root')\r\n    );    \r\n  }\r\n\r\n  // add a 'W' on the space that was clicked and eliminate any conflicting 'B' \r\n  handleClick(i) {\r\n    const history = this.state.history.slice(0, this.state.stepNumber +1);\r\n    const current = history[history.length-1];\r\n    const spaces = current.spaces.slice();\r\n    const lastClick = this.state.lastClick;\r\n    let N = this.state.size;\r\n\r\n    // if last clicked just undo\r\n    if (lastClick === i) {\r\n      this.jumpTo(this.state.stepNumber-1);\r\n      return;\r\n    }\r\n\r\n    // if 'W', remove 'W' then add back nonconflicting 'B'\r\n    if (spaces[i] === 'W') {\r\n      \r\n      spaces[i] = null;\r\n\r\n      let rowS = N*Math.trunc(i/N);\r\n      let rowE = N* Math.trunc(i/N) + N;\r\n      // check if row can add back 'B'\r\n      for (let S = rowS; S < rowE; S++) {\r\n        if (this.checkSpace(S, spaces)) {\r\n          spaces[S] = 'B';\r\n        }\r\n      }\r\n      // check column\r\n      rowS = i%N;\r\n      rowE = (N*(N-1))+(i%N);\r\n      for (let S = rowS, j = S; S < rowE; S++, j+=N) {\r\n        if (this.checkSpace(j, spaces)) {\r\n          spaces[j] = 'B';\r\n        }\r\n      }\r\n\r\n      // check up and left diagonal\r\n      rowE = i%N;\r\n      for (let S = 0, j = i; S <= rowE; S++, j-=N+1) {\r\n        if (this.checkSpace(j, spaces)) {\r\n          spaces[j] = 'B';\r\n        }\r\n      }\r\n      // check down and left diagonal\r\n      for (let S = 0, j = i; S <= rowE; S++, j+=N-1) {\r\n        if (this.checkSpace(j, spaces)) {\r\n          spaces[j] = 'B';\r\n        }\r\n      }\r\n      // check down and right diagonal\r\n      rowE = (N-(i%N))-1;\r\n      for (let S = 0, j = i; S <= rowE && S < N*N; S++, j+=N+1) {\r\n        if (this.checkSpace(j, spaces)) {\r\n          spaces[j] = 'B';\r\n        }\r\n      }\r\n      // check up and right diagonal\r\n      for (let S = 0, j = i; S <= rowE; S++, j-=N-1) {\r\n        if (this.checkSpace(j, spaces)) {\r\n          spaces[j] = 'B';\r\n        }\r\n      }\r\n\r\n    } else {\r\n\r\n      // if 'B' or empty, place 'W', then remove conflciting 'B'\r\n      spaces[i] =  'W';\r\n\r\n      // clear row\r\n      let rowS = N*Math.trunc(i/N);\r\n      let rowE = N*Math.trunc(i/N) + N;\r\n      for (let S = rowS; S < rowE; S++) {\r\n        if (spaces[S] !== 'W') spaces[S] = null;\r\n      }\r\n      // clear column\r\n      rowS = i%N;\r\n      rowE = (N*(N-1))+(i%N);\r\n      for (let S = rowS, j = S; S < rowE; S++, j+=N) {\r\n        if (spaces[j] !== 'W') spaces[j] = null;\r\n      }\r\n\r\n      // clear up and left diagonal\r\n      rowE = i%N;\r\n      for (let S = 0, j = i; S <= rowE; S++, j-=N+1) {\r\n        if (spaces[j] !== 'W') spaces[j] = null;\r\n      }\r\n      // clear down and left diagonal\r\n      for (let S = 0, j = i; S <= rowE; S++, j+=N-1) {\r\n        if (spaces[j] !== 'W') spaces[j] = null;\r\n      }\r\n      // clear down and right diagonal\r\n      rowE = (N-(i%N))-1;\r\n      for (let S = 0, j = i; S <= rowE && S < N*N; S++, j+=N+1) {\r\n        if (spaces[j] !== 'W') spaces[j] = null;\r\n      }\r\n      // up and right diagonal\r\n      for (let S = 0, j = i; S <= rowE; S++, j-=N-1) {\r\n        if (spaces[j] !== 'W') spaces[j] = null;\r\n      }\r\n    }\r\n\r\n    // update the state to reflect the change\r\n    this.setState({\r\n      history: history.concat([{\r\n        spaces: spaces,\r\n      }]),\r\n      stepNumber: history.length,\r\n      lastClick: i,\r\n    });\r\n  }\r\n\r\n  // check a space for conflicts, if no conflicts, add back a 'B'\r\n  checkSpace(i,spaces) {\r\n    // check each space if there are other 'W' attacking this space\r\n    // idea: if I check the row and encounter another 'W' I can stop checking the row etc.\r\n\r\n    let N = this.state.size;\r\n\r\n    if (spaces[i] === 'W') return false;\r\n\r\n    // check row\r\n    let rowS = N*Math.trunc(i/N);\r\n    let rowE = N*Math.trunc(i/N) + N;\r\n    for (let S = rowS; S < rowE; S++) {\r\n      if (spaces[S] === 'W') {\r\n        if (S !== i) return false;\r\n      }\r\n    }\r\n\r\n    // check column\r\n    rowS = i%N;\r\n    rowE = (N*(N-1))+(i%N);\r\n    for (let S = rowS, j = S; S < rowE; S++, j+=N) {\r\n      if (spaces[j] === 'W') {\r\n        if (j !== i) return false;\r\n      }\r\n    }\r\n\r\n    // check up and left\r\n    rowE = i%N;\r\n    for (let S = 0, j = i; S <= rowE; S++, j-=N+1) {\r\n      if (spaces[j] === 'W') {\r\n        if (j !== i) return false;\r\n      }\r\n    }\r\n\r\n    // check down and left\r\n    for (let S = 0, j = i; S <= rowE; S++, j+=N-1) {\r\n      if (spaces[j] === 'W') {\r\n        if (j !== i) return false;\r\n      }\r\n    }\r\n\r\n    // check down and right\r\n    rowE = (N-(i%N))-1;\r\n    for (let S = 0, j = i; S <= rowE && S < N*N; S++, j+=N+1) {\r\n      if (spaces[j] === 'W') {\r\n        if (j !== i) return false;\r\n      }\r\n    }\r\n\r\n    // check up and right\r\n    for (let S = 0, j = i; S <= rowE; S++, j-=N-1) {\r\n      if (spaces[j] === 'W') {\r\n        if (j !== i) return false;\r\n      }\r\n    }\r\n\r\n    // if the space makes it this far, it passed the test, add a 'B'\r\n    return true;\r\n  }\r\n\r\n  jumpTo(step,i) {\r\n    if (step < 0) return;\r\n    if (step >= this.state.history.length) return;\r\n    this.setState({\r\n      stepNumber: step,\r\n      lastClick: i,\r\n    })\r\n  }\r\n}\r\n\r\n// count the number of spaces with 'W' and 'B'\r\nfunction countQueens(spaces, N) {\r\n  const S = N*N;\r\n  let B = 0;\r\n  let W = 0;\r\n  for (let i = 0; i < S; i++) {\r\n    if (spaces[i] !== null && spaces[i] === 'W') {\r\n      B++;\r\n    } else if (spaces[i] !== null && spaces[i] === 'B') {\r\n      W++;\r\n    }\r\n  }\r\n  \r\n  return (\r\n    <div>\r\n    W Count: <b>{B}</b> \r\n    <div>  \r\n    B Count: <b>{W}</b>\r\n    <br/><br/>\r\n    </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// ========================================\r\n// render the game, initial board size 8\r\nReactDOM.render(\r\n  <Game size = {8} history = {[{\r\n    spaces: Array(8).fill(null),\r\n  }]}/>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}